// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: google/protobuf/wrappers.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "google.protobuf";

/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 */
export interface DoubleValue {
  /** The double value. */
  value: number;
}

/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 */
export interface FloatValue {
  /** The float value. */
  value: number;
}

/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 */
export interface Int64Value {
  /** The int64 value. */
  value: number;
}

/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 */
export interface UInt64Value {
  /** The uint64 value. */
  value: number;
}

/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 */
export interface Int32Value {
  /** The int32 value. */
  value: number;
}

/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 */
export interface UInt32Value {
  /** The uint32 value. */
  value: number;
}

/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 */
export interface BoolValue {
  /** The bool value. */
  value: boolean;
}

/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 */
export interface StringValue {
  /** The string value. */
  value: string;
}

/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 */
export interface BytesValue {
  /** The bytes value. */
  value: Uint8Array;
}

export const DoubleValue: MessageFns<DoubleValue> = {
  encode(_: DoubleValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for DoubleValue");
  },

  decode(_: BinaryReader | Uint8Array, length?: number): DoubleValue {
    throw new Error("decode not generated for DoubleValue");
  },
};

export const FloatValue: MessageFns<FloatValue> = {
  encode(_: FloatValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for FloatValue");
  },

  decode(_: BinaryReader | Uint8Array, length?: number): FloatValue {
    throw new Error("decode not generated for FloatValue");
  },
};

export const Int64Value: MessageFns<Int64Value> = {
  encode(_: Int64Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for Int64Value");
  },

  decode(_: BinaryReader | Uint8Array, length?: number): Int64Value {
    throw new Error("decode not generated for Int64Value");
  },
};

export const UInt64Value: MessageFns<UInt64Value> = {
  encode(_: UInt64Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for UInt64Value");
  },

  decode(_: BinaryReader | Uint8Array, length?: number): UInt64Value {
    throw new Error("decode not generated for UInt64Value");
  },
};

export const Int32Value: MessageFns<Int32Value> = {
  encode(_: Int32Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for Int32Value");
  },

  decode(_: BinaryReader | Uint8Array, length?: number): Int32Value {
    throw new Error("decode not generated for Int32Value");
  },
};

export const UInt32Value: MessageFns<UInt32Value> = {
  encode(_: UInt32Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for UInt32Value");
  },

  decode(_: BinaryReader | Uint8Array, length?: number): UInt32Value {
    throw new Error("decode not generated for UInt32Value");
  },
};

export const BoolValue: MessageFns<BoolValue> = {
  encode(_: BoolValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for BoolValue");
  },

  decode(_: BinaryReader | Uint8Array, length?: number): BoolValue {
    throw new Error("decode not generated for BoolValue");
  },
};

export const StringValue: MessageFns<StringValue> = {
  encode(_: StringValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for StringValue");
  },

  decode(_: BinaryReader | Uint8Array, length?: number): StringValue {
    throw new Error("decode not generated for StringValue");
  },
};

export const BytesValue: MessageFns<BytesValue> = {
  encode(_: BytesValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    throw new Error("encode not generated for BytesValue");
  },

  decode(_: BinaryReader | Uint8Array, length?: number): BytesValue {
    throw new Error("decode not generated for BytesValue");
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
